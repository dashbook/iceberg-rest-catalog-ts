/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OAuthError,
  OAuthTokenResponse,
  TokenType,
} from '../models/index';
import {
    OAuthErrorFromJSON,
    OAuthErrorToJSON,
    OAuthTokenResponseFromJSON,
    OAuthTokenResponseToJSON,
    TokenTypeFromJSON,
    TokenTypeToJSON,
} from '../models/index';

export interface GetTokenRequest {
    grantType?: GetTokenGrantTypeEnum;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
    requestedTokenType?: TokenType;
    subjectToken?: string;
    subjectTokenType?: TokenType;
    actorToken?: string;
    actorTokenType?: TokenType;
}

/**
 * 
 */
export class OAuth2APIApi extends runtime.BaseAPI {

    /**
     * The `oauth/tokens` endpoint is **DEPRECATED for REMOVAL**. It is _not_ recommended to implement this endpoint, unless you are fully aware of the potential security implications. All clients are encouraged to explicitly set the configuration property `oauth2-server-uri` to the correct OAuth endpoint. Deprecated since Iceberg (Java) 1.6.0. The endpoint and related types will be removed from this spec in Iceberg (Java) 2.0. See [Security improvements in the Iceberg REST specification](https://github.com/apache/iceberg/issues/10537)  Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.  This endpoint is used for three purposes - 1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow. 2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow. 3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.  For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.  Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the \"subject\" token) from the session for a more specific access token for that user, using the catalog\'s access token as the \"actor\" token (2). The user ID token is the \"subject\" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog\'s bearer token in the \"Authorization\" header.  Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request\'s \"subject\" token should be the expiring token. This request should use the subject token in the \"Authorization\" header.
     * Get a token using an OAuth2 flow (DEPRECATED for REMOVAL)
     * @deprecated
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        if (requestParameters['requestedTokenType'] != null) {
            formParams.append('requested_token_type', requestParameters['requestedTokenType'] as any);
        }

        if (requestParameters['subjectToken'] != null) {
            formParams.append('subject_token', requestParameters['subjectToken'] as any);
        }

        if (requestParameters['subjectTokenType'] != null) {
            formParams.append('subject_token_type', requestParameters['subjectTokenType'] as any);
        }

        if (requestParameters['actorToken'] != null) {
            formParams.append('actor_token', requestParameters['actorToken'] as any);
        }

        if (requestParameters['actorTokenType'] != null) {
            formParams.append('actor_token_type', requestParameters['actorTokenType'] as any);
        }

        const response = await this.request({
            path: `/v1/oauth/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthTokenResponseFromJSON(jsonValue));
    }

    /**
     * The `oauth/tokens` endpoint is **DEPRECATED for REMOVAL**. It is _not_ recommended to implement this endpoint, unless you are fully aware of the potential security implications. All clients are encouraged to explicitly set the configuration property `oauth2-server-uri` to the correct OAuth endpoint. Deprecated since Iceberg (Java) 1.6.0. The endpoint and related types will be removed from this spec in Iceberg (Java) 2.0. See [Security improvements in the Iceberg REST specification](https://github.com/apache/iceberg/issues/10537)  Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.  This endpoint is used for three purposes - 1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow. 2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow. 3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.  For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.  Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the \"subject\" token) from the session for a more specific access token for that user, using the catalog\'s access token as the \"actor\" token (2). The user ID token is the \"subject\" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog\'s bearer token in the \"Authorization\" header.  Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request\'s \"subject\" token should be the expiring token. This request should use the subject token in the \"Authorization\" header.
     * Get a token using an OAuth2 flow (DEPRECATED for REMOVAL)
     * @deprecated
     */
    async getToken(requestParameters: GetTokenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthTokenResponse> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTokenGrantTypeEnum = {
    UrnIetfParamsOauthGrantTypeTokenExchange: 'urn:ietf:params:oauth:grant-type:token-exchange'
} as const;
export type GetTokenGrantTypeEnum = typeof GetTokenGrantTypeEnum[keyof typeof GetTokenGrantTypeEnum];
