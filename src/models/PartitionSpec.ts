/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PartitionField } from './PartitionField';
import {
    PartitionFieldFromJSON,
    PartitionFieldFromJSONTyped,
    PartitionFieldToJSON,
    PartitionFieldToJSONTyped,
} from './PartitionField';

/**
 * 
 * @export
 * @interface PartitionSpec
 */
export interface PartitionSpec {
    /**
     * 
     * @type {number}
     * @memberof PartitionSpec
     */
    readonly specId?: number;
    /**
     * 
     * @type {Array<PartitionField>}
     * @memberof PartitionSpec
     */
    fields: Array<PartitionField>;
}

/**
 * Check if a given object implements the PartitionSpec interface.
 */
export function instanceOfPartitionSpec(value: object): value is PartitionSpec {
    if (!('fields' in value) || value['fields'] === undefined) return false;
    return true;
}

export function PartitionSpecFromJSON(json: any): PartitionSpec {
    return PartitionSpecFromJSONTyped(json, false);
}

export function PartitionSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): PartitionSpec {
    if (json == null) {
        return json;
    }
    return {
        
        'specId': json['spec-id'] == null ? undefined : json['spec-id'],
        'fields': ((json['fields'] as Array<any>).map(PartitionFieldFromJSON)),
    };
}

export function PartitionSpecToJSON(json: any): PartitionSpec {
    return PartitionSpecToJSONTyped(json, false);
}

export function PartitionSpecToJSONTyped(value?: Omit<PartitionSpec, 'spec-id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fields': ((value['fields'] as Array<any>).map(PartitionFieldToJSON)),
    };
}

