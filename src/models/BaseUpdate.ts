/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { AddSchemaUpdate, AddSchemaUpdateFromJSONTyped, AddSchemaUpdateToJSON, AddSchemaUpdateToJSONTyped } from './AddSchemaUpdate';
import { AddSnapshotUpdate, AddSnapshotUpdateFromJSONTyped, AddSnapshotUpdateToJSON, AddSnapshotUpdateToJSONTyped } from './AddSnapshotUpdate';
import { AddSortOrderUpdate, AddSortOrderUpdateFromJSONTyped, AddSortOrderUpdateToJSON, AddSortOrderUpdateToJSONTyped } from './AddSortOrderUpdate';
import { AddPartitionSpecUpdate, AddPartitionSpecUpdateFromJSONTyped, AddPartitionSpecUpdateToJSON, AddPartitionSpecUpdateToJSONTyped } from './AddPartitionSpecUpdate';
import { AddViewVersionUpdate, AddViewVersionUpdateFromJSONTyped, AddViewVersionUpdateToJSON, AddViewVersionUpdateToJSONTyped } from './AddViewVersionUpdate';
import { AssignUUIDUpdate, AssignUUIDUpdateFromJSONTyped, AssignUUIDUpdateToJSON, AssignUUIDUpdateToJSONTyped } from './AssignUUIDUpdate';
import { EnableRowLineageUpdate, EnableRowLineageUpdateFromJSONTyped, EnableRowLineageUpdateToJSON, EnableRowLineageUpdateToJSONTyped } from './EnableRowLineageUpdate';
import { RemovePartitionSpecsUpdate, RemovePartitionSpecsUpdateFromJSONTyped, RemovePartitionSpecsUpdateToJSON, RemovePartitionSpecsUpdateToJSONTyped } from './RemovePartitionSpecsUpdate';
import { RemovePartitionStatisticsUpdate, RemovePartitionStatisticsUpdateFromJSONTyped, RemovePartitionStatisticsUpdateToJSON, RemovePartitionStatisticsUpdateToJSONTyped } from './RemovePartitionStatisticsUpdate';
import { RemovePropertiesUpdate, RemovePropertiesUpdateFromJSONTyped, RemovePropertiesUpdateToJSON, RemovePropertiesUpdateToJSONTyped } from './RemovePropertiesUpdate';
import { RemoveSchemasUpdate, RemoveSchemasUpdateFromJSONTyped, RemoveSchemasUpdateToJSON, RemoveSchemasUpdateToJSONTyped } from './RemoveSchemasUpdate';
import { RemoveSnapshotRefUpdate, RemoveSnapshotRefUpdateFromJSONTyped, RemoveSnapshotRefUpdateToJSON, RemoveSnapshotRefUpdateToJSONTyped } from './RemoveSnapshotRefUpdate';
import { RemoveSnapshotsUpdate, RemoveSnapshotsUpdateFromJSONTyped, RemoveSnapshotsUpdateToJSON, RemoveSnapshotsUpdateToJSONTyped } from './RemoveSnapshotsUpdate';
import { RemoveStatisticsUpdate, RemoveStatisticsUpdateFromJSONTyped, RemoveStatisticsUpdateToJSON, RemoveStatisticsUpdateToJSONTyped } from './RemoveStatisticsUpdate';
import { SetCurrentSchemaUpdate, SetCurrentSchemaUpdateFromJSONTyped, SetCurrentSchemaUpdateToJSON, SetCurrentSchemaUpdateToJSONTyped } from './SetCurrentSchemaUpdate';
import { SetCurrentViewVersionUpdate, SetCurrentViewVersionUpdateFromJSONTyped, SetCurrentViewVersionUpdateToJSON, SetCurrentViewVersionUpdateToJSONTyped } from './SetCurrentViewVersionUpdate';
import { SetDefaultSortOrderUpdate, SetDefaultSortOrderUpdateFromJSONTyped, SetDefaultSortOrderUpdateToJSON, SetDefaultSortOrderUpdateToJSONTyped } from './SetDefaultSortOrderUpdate';
import { SetDefaultSpecUpdate, SetDefaultSpecUpdateFromJSONTyped, SetDefaultSpecUpdateToJSON, SetDefaultSpecUpdateToJSONTyped } from './SetDefaultSpecUpdate';
import { SetLocationUpdate, SetLocationUpdateFromJSONTyped, SetLocationUpdateToJSON, SetLocationUpdateToJSONTyped } from './SetLocationUpdate';
import { SetPartitionStatisticsUpdate, SetPartitionStatisticsUpdateFromJSONTyped, SetPartitionStatisticsUpdateToJSON, SetPartitionStatisticsUpdateToJSONTyped } from './SetPartitionStatisticsUpdate';
import { SetPropertiesUpdate, SetPropertiesUpdateFromJSONTyped, SetPropertiesUpdateToJSON, SetPropertiesUpdateToJSONTyped } from './SetPropertiesUpdate';
import { SetSnapshotRefUpdate, SetSnapshotRefUpdateFromJSONTyped, SetSnapshotRefUpdateToJSON, SetSnapshotRefUpdateToJSONTyped } from './SetSnapshotRefUpdate';
import { SetStatisticsUpdate, SetStatisticsUpdateFromJSONTyped, SetStatisticsUpdateToJSON, SetStatisticsUpdateToJSONTyped } from './SetStatisticsUpdate';
import { UpgradeFormatVersionUpdate, UpgradeFormatVersionUpdateFromJSONTyped, UpgradeFormatVersionUpdateToJSON, UpgradeFormatVersionUpdateToJSONTyped } from './UpgradeFormatVersionUpdate';
/**
 * 
 * @export
 * @interface BaseUpdate
 */
export interface BaseUpdate {
    /**
     * 
     * @type {string}
     * @memberof BaseUpdate
     */
    action: string;
}

/**
 * Check if a given object implements the BaseUpdate interface.
 */
export function instanceOfBaseUpdate(value: object): value is BaseUpdate {
    if (!('action' in value) || value['action'] === undefined) return false;
    return true;
}

export function BaseUpdateFromJSON(json: any): BaseUpdate {
    return BaseUpdateFromJSONTyped(json, false);
}

export function BaseUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseUpdate {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['action'] === 'add-schema') {
            return AddSchemaUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'add-snapshot') {
            return AddSnapshotUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'add-sort-order') {
            return AddSortOrderUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'add-spec') {
            return AddPartitionSpecUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'add-view-version') {
            return AddViewVersionUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'assign-uuid') {
            return AssignUUIDUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'enable-row-lineage') {
            return EnableRowLineageUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-partition-specs') {
            return RemovePartitionSpecsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-partition-statistics') {
            return RemovePartitionStatisticsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-properties') {
            return RemovePropertiesUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-schemas') {
            return RemoveSchemasUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-snapshot-ref') {
            return RemoveSnapshotRefUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-snapshots') {
            return RemoveSnapshotsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'remove-statistics') {
            return RemoveStatisticsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-current-schema') {
            return SetCurrentSchemaUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-current-view-version') {
            return SetCurrentViewVersionUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-default-sort-order') {
            return SetDefaultSortOrderUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-default-spec') {
            return SetDefaultSpecUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-location') {
            return SetLocationUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-partition-statistics') {
            return SetPartitionStatisticsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-properties') {
            return SetPropertiesUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-snapshot-ref') {
            return SetSnapshotRefUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'set-statistics') {
            return SetStatisticsUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['action'] === 'upgrade-format-version') {
            return UpgradeFormatVersionUpdateFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'action': json['action'],
    };
}

export function BaseUpdateToJSON(json: any): BaseUpdate {
    return BaseUpdateToJSONTyped(json, false);
}

export function BaseUpdateToJSONTyped(value?: BaseUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['action']) {
            case 'add-schema':
                return AddSchemaUpdateToJSONTyped(value as AddSchemaUpdate, ignoreDiscriminator);
            case 'add-snapshot':
                return AddSnapshotUpdateToJSONTyped(value as AddSnapshotUpdate, ignoreDiscriminator);
            case 'add-sort-order':
                return AddSortOrderUpdateToJSONTyped(value as AddSortOrderUpdate, ignoreDiscriminator);
            case 'add-spec':
                return AddPartitionSpecUpdateToJSONTyped(value as AddPartitionSpecUpdate, ignoreDiscriminator);
            case 'add-view-version':
                return AddViewVersionUpdateToJSONTyped(value as AddViewVersionUpdate, ignoreDiscriminator);
            case 'assign-uuid':
                return AssignUUIDUpdateToJSONTyped(value as AssignUUIDUpdate, ignoreDiscriminator);
            case 'enable-row-lineage':
                return EnableRowLineageUpdateToJSONTyped(value as EnableRowLineageUpdate, ignoreDiscriminator);
            case 'remove-partition-specs':
                return RemovePartitionSpecsUpdateToJSONTyped(value as RemovePartitionSpecsUpdate, ignoreDiscriminator);
            case 'remove-partition-statistics':
                return RemovePartitionStatisticsUpdateToJSONTyped(value as RemovePartitionStatisticsUpdate, ignoreDiscriminator);
            case 'remove-properties':
                return RemovePropertiesUpdateToJSONTyped(value as RemovePropertiesUpdate, ignoreDiscriminator);
            case 'remove-schemas':
                return RemoveSchemasUpdateToJSONTyped(value as RemoveSchemasUpdate, ignoreDiscriminator);
            case 'remove-snapshot-ref':
                return RemoveSnapshotRefUpdateToJSONTyped(value as RemoveSnapshotRefUpdate, ignoreDiscriminator);
            case 'remove-snapshots':
                return RemoveSnapshotsUpdateToJSONTyped(value as RemoveSnapshotsUpdate, ignoreDiscriminator);
            case 'remove-statistics':
                return RemoveStatisticsUpdateToJSONTyped(value as RemoveStatisticsUpdate, ignoreDiscriminator);
            case 'set-current-schema':
                return SetCurrentSchemaUpdateToJSONTyped(value as SetCurrentSchemaUpdate, ignoreDiscriminator);
            case 'set-current-view-version':
                return SetCurrentViewVersionUpdateToJSONTyped(value as SetCurrentViewVersionUpdate, ignoreDiscriminator);
            case 'set-default-sort-order':
                return SetDefaultSortOrderUpdateToJSONTyped(value as SetDefaultSortOrderUpdate, ignoreDiscriminator);
            case 'set-default-spec':
                return SetDefaultSpecUpdateToJSONTyped(value as SetDefaultSpecUpdate, ignoreDiscriminator);
            case 'set-location':
                return SetLocationUpdateToJSONTyped(value as SetLocationUpdate, ignoreDiscriminator);
            case 'set-partition-statistics':
                return SetPartitionStatisticsUpdateToJSONTyped(value as SetPartitionStatisticsUpdate, ignoreDiscriminator);
            case 'set-properties':
                return SetPropertiesUpdateToJSONTyped(value as SetPropertiesUpdate, ignoreDiscriminator);
            case 'set-snapshot-ref':
                return SetSnapshotRefUpdateToJSONTyped(value as SetSnapshotRefUpdate, ignoreDiscriminator);
            case 'set-statistics':
                return SetStatisticsUpdateToJSONTyped(value as SetStatisticsUpdate, ignoreDiscriminator);
            case 'upgrade-format-version':
                return UpgradeFormatVersionUpdateToJSONTyped(value as UpgradeFormatVersionUpdate, ignoreDiscriminator);
            default:
                throw new Error(`No variant of BaseUpdate exists with 'action=${value['action']}'`);
        }
    }

    return {
        
        'action': value['action'],
    };
}

