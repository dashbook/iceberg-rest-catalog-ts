/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PrimitiveTypeValue } from './PrimitiveTypeValue';
import {
    PrimitiveTypeValueFromJSON,
    PrimitiveTypeValueFromJSONTyped,
    PrimitiveTypeValueToJSON,
    PrimitiveTypeValueToJSONTyped,
} from './PrimitiveTypeValue';

/**
 * 
 * @export
 * @interface ValueMap
 */
export interface ValueMap {
    /**
     * List of integer column ids for each corresponding value
     * @type {Array<number>}
     * @memberof ValueMap
     */
    keys?: Array<number>;
    /**
     * List of primitive type values, matched to 'keys' by index
     * @type {Array<PrimitiveTypeValue>}
     * @memberof ValueMap
     */
    values?: Array<PrimitiveTypeValue>;
}

/**
 * Check if a given object implements the ValueMap interface.
 */
export function instanceOfValueMap(value: object): value is ValueMap {
    return true;
}

export function ValueMapFromJSON(json: any): ValueMap {
    return ValueMapFromJSONTyped(json, false);
}

export function ValueMapFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueMap {
    if (json == null) {
        return json;
    }
    return {
        
        'keys': json['keys'] == null ? undefined : json['keys'],
        'values': json['values'] == null ? undefined : ((json['values'] as Array<any>).map(PrimitiveTypeValueFromJSON)),
    };
}

export function ValueMapToJSON(json: any): ValueMap {
    return ValueMapToJSONTyped(json, false);
}

export function ValueMapToJSONTyped(value?: ValueMap | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'keys': value['keys'],
        'values': value['values'] == null ? undefined : ((value['values'] as Array<any>).map(PrimitiveTypeValueToJSON)),
    };
}

