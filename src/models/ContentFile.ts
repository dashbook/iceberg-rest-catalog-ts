/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PrimitiveTypeValue } from './PrimitiveTypeValue';
import {
    PrimitiveTypeValueFromJSON,
    PrimitiveTypeValueFromJSONTyped,
    PrimitiveTypeValueToJSON,
    PrimitiveTypeValueToJSONTyped,
} from './PrimitiveTypeValue';
import type { FileFormat } from './FileFormat';
import {
    FileFormatFromJSON,
    FileFormatFromJSONTyped,
    FileFormatToJSON,
    FileFormatToJSONTyped,
} from './FileFormat';

import { DataFile, DataFileFromJSONTyped, DataFileToJSON, DataFileToJSONTyped } from './DataFile';
import { EqualityDeleteFile, EqualityDeleteFileFromJSONTyped, EqualityDeleteFileToJSON, EqualityDeleteFileToJSONTyped } from './EqualityDeleteFile';
import { PositionDeleteFile, PositionDeleteFileFromJSONTyped, PositionDeleteFileToJSON, PositionDeleteFileToJSONTyped } from './PositionDeleteFile';
/**
 * 
 * @export
 * @interface ContentFile
 */
export interface ContentFile {
    /**
     * 
     * @type {string}
     * @memberof ContentFile
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ContentFile
     */
    filePath: string;
    /**
     * 
     * @type {FileFormat}
     * @memberof ContentFile
     */
    fileFormat: FileFormat;
    /**
     * 
     * @type {number}
     * @memberof ContentFile
     */
    specId: number;
    /**
     * A list of partition field values ordered based on the fields of the partition spec specified by the `spec-id`
     * @type {Array<PrimitiveTypeValue>}
     * @memberof ContentFile
     */
    partition: Array<PrimitiveTypeValue>;
    /**
     * Total file size in bytes
     * @type {number}
     * @memberof ContentFile
     */
    fileSizeInBytes: number;
    /**
     * Number of records in the file
     * @type {number}
     * @memberof ContentFile
     */
    recordCount: number;
    /**
     * Encryption key metadata blob
     * @type {string}
     * @memberof ContentFile
     */
    keyMetadata?: string;
    /**
     * List of splittable offsets
     * @type {Array<number>}
     * @memberof ContentFile
     */
    splitOffsets?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof ContentFile
     */
    sortOrderId?: number;
}



/**
 * Check if a given object implements the ContentFile interface.
 */
export function instanceOfContentFile(value: object): value is ContentFile {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('filePath' in value) || value['filePath'] === undefined) return false;
    if (!('fileFormat' in value) || value['fileFormat'] === undefined) return false;
    if (!('specId' in value) || value['specId'] === undefined) return false;
    if (!('partition' in value) || value['partition'] === undefined) return false;
    if (!('fileSizeInBytes' in value) || value['fileSizeInBytes'] === undefined) return false;
    if (!('recordCount' in value) || value['recordCount'] === undefined) return false;
    return true;
}

export function ContentFileFromJSON(json: any): ContentFile {
    return ContentFileFromJSONTyped(json, false);
}

export function ContentFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentFile {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['content'] === 'data') {
            return DataFileFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['content'] === 'equality-deletes') {
            return EqualityDeleteFileFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['content'] === 'position-deletes') {
            return PositionDeleteFileFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'content': json['content'],
        'filePath': json['file-path'],
        'fileFormat': FileFormatFromJSON(json['file-format']),
        'specId': json['spec-id'],
        'partition': ((json['partition'] as Array<any>).map(PrimitiveTypeValueFromJSON)),
        'fileSizeInBytes': json['file-size-in-bytes'],
        'recordCount': json['record-count'],
        'keyMetadata': json['key-metadata'] == null ? undefined : json['key-metadata'],
        'splitOffsets': json['split-offsets'] == null ? undefined : json['split-offsets'],
        'sortOrderId': json['sort-order-id'] == null ? undefined : json['sort-order-id'],
    };
}

export function ContentFileToJSON(json: any): ContentFile {
    return ContentFileToJSONTyped(json, false);
}

export function ContentFileToJSONTyped(value?: ContentFile | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['content']) {
            case 'data':
                return DataFileToJSONTyped(value as DataFile, ignoreDiscriminator);
            case 'equality-deletes':
                return EqualityDeleteFileToJSONTyped(value as EqualityDeleteFile, ignoreDiscriminator);
            case 'position-deletes':
                return PositionDeleteFileToJSONTyped(value as PositionDeleteFile, ignoreDiscriminator);
            default:
                throw new Error(`No variant of ContentFile exists with 'content=${value['content']}'`);
        }
    }

    return {
        
        'content': value['content'],
        'file-path': value['filePath'],
        'file-format': FileFormatToJSON(value['fileFormat']),
        'spec-id': value['specId'],
        'partition': ((value['partition'] as Array<any>).map(PrimitiveTypeValueToJSON)),
        'file-size-in-bytes': value['fileSizeInBytes'],
        'record-count': value['recordCount'],
        'key-metadata': value['keyMetadata'],
        'split-offsets': value['splitOffsets'],
        'sort-order-id': value['sortOrderId'],
    };
}

