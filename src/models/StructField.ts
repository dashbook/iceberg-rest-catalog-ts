/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PrimitiveTypeValue } from './PrimitiveTypeValue';
import {
    PrimitiveTypeValueFromJSON,
    PrimitiveTypeValueFromJSONTyped,
    PrimitiveTypeValueToJSON,
    PrimitiveTypeValueToJSONTyped,
} from './PrimitiveTypeValue';
import type { Type } from './Type';
import {
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
    TypeToJSONTyped,
} from './Type';

/**
 * 
 * @export
 * @interface StructField
 */
export interface StructField {
    /**
     * 
     * @type {number}
     * @memberof StructField
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof StructField
     */
    name: string;
    /**
     * 
     * @type {Type}
     * @memberof StructField
     */
    type: Type;
    /**
     * 
     * @type {boolean}
     * @memberof StructField
     */
    required: boolean;
    /**
     * 
     * @type {string}
     * @memberof StructField
     */
    doc?: string;
    /**
     * 
     * @type {PrimitiveTypeValue}
     * @memberof StructField
     */
    initialDefault?: PrimitiveTypeValue;
    /**
     * 
     * @type {PrimitiveTypeValue}
     * @memberof StructField
     */
    writeDefault?: PrimitiveTypeValue;
}

/**
 * Check if a given object implements the StructField interface.
 */
export function instanceOfStructField(value: object): value is StructField {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('required' in value) || value['required'] === undefined) return false;
    return true;
}

export function StructFieldFromJSON(json: any): StructField {
    return StructFieldFromJSONTyped(json, false);
}

export function StructFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): StructField {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': TypeFromJSON(json['type']),
        'required': json['required'],
        'doc': json['doc'] == null ? undefined : json['doc'],
        'initialDefault': json['initial-default'] == null ? undefined : PrimitiveTypeValueFromJSON(json['initial-default']),
        'writeDefault': json['write-default'] == null ? undefined : PrimitiveTypeValueFromJSON(json['write-default']),
    };
}

export function StructFieldToJSON(json: any): StructField {
    return StructFieldToJSONTyped(json, false);
}

export function StructFieldToJSONTyped(value?: StructField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': TypeToJSON(value['type']),
        'required': value['required'],
        'doc': value['doc'],
        'initial-default': PrimitiveTypeValueToJSON(value['initialDefault']),
        'write-default': PrimitiveTypeValueToJSON(value['writeDefault']),
    };
}

