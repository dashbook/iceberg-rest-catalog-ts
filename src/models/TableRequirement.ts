/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { AssertCreate, AssertCreateFromJSONTyped, AssertCreateToJSON, AssertCreateToJSONTyped } from './AssertCreate';
import { AssertCurrentSchemaId, AssertCurrentSchemaIdFromJSONTyped, AssertCurrentSchemaIdToJSON, AssertCurrentSchemaIdToJSONTyped } from './AssertCurrentSchemaId';
import { AssertDefaultSortOrderId, AssertDefaultSortOrderIdFromJSONTyped, AssertDefaultSortOrderIdToJSON, AssertDefaultSortOrderIdToJSONTyped } from './AssertDefaultSortOrderId';
import { AssertDefaultSpecId, AssertDefaultSpecIdFromJSONTyped, AssertDefaultSpecIdToJSON, AssertDefaultSpecIdToJSONTyped } from './AssertDefaultSpecId';
import { AssertLastAssignedFieldId, AssertLastAssignedFieldIdFromJSONTyped, AssertLastAssignedFieldIdToJSON, AssertLastAssignedFieldIdToJSONTyped } from './AssertLastAssignedFieldId';
import { AssertLastAssignedPartitionId, AssertLastAssignedPartitionIdFromJSONTyped, AssertLastAssignedPartitionIdToJSON, AssertLastAssignedPartitionIdToJSONTyped } from './AssertLastAssignedPartitionId';
import { AssertRefSnapshotId, AssertRefSnapshotIdFromJSONTyped, AssertRefSnapshotIdToJSON, AssertRefSnapshotIdToJSONTyped } from './AssertRefSnapshotId';
import { AssertTableUUID, AssertTableUUIDFromJSONTyped, AssertTableUUIDToJSON, AssertTableUUIDToJSONTyped } from './AssertTableUUID';
/**
 * 
 * @export
 * @interface TableRequirement
 */
export interface TableRequirement {
    /**
     * 
     * @type {string}
     * @memberof TableRequirement
     */
    type: string;
}

/**
 * Check if a given object implements the TableRequirement interface.
 */
export function instanceOfTableRequirement(value: object): value is TableRequirement {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TableRequirementFromJSON(json: any): TableRequirement {
    return TableRequirementFromJSONTyped(json, false);
}

export function TableRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableRequirement {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'assert-create') {
            return AssertCreateFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-current-schema-id') {
            return AssertCurrentSchemaIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-default-sort-order-id') {
            return AssertDefaultSortOrderIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-default-spec-id') {
            return AssertDefaultSpecIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-last-assigned-field-id') {
            return AssertLastAssignedFieldIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-last-assigned-partition-id') {
            return AssertLastAssignedPartitionIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-ref-snapshot-id') {
            return AssertRefSnapshotIdFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['type'] === 'assert-table-uuid') {
            return AssertTableUUIDFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function TableRequirementToJSON(json: any): TableRequirement {
    return TableRequirementToJSONTyped(json, false);
}

export function TableRequirementToJSONTyped(value?: TableRequirement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['type']) {
            case 'assert-create':
                return AssertCreateToJSONTyped(value as AssertCreate, ignoreDiscriminator);
            case 'assert-current-schema-id':
                return AssertCurrentSchemaIdToJSONTyped(value as AssertCurrentSchemaId, ignoreDiscriminator);
            case 'assert-default-sort-order-id':
                return AssertDefaultSortOrderIdToJSONTyped(value as AssertDefaultSortOrderId, ignoreDiscriminator);
            case 'assert-default-spec-id':
                return AssertDefaultSpecIdToJSONTyped(value as AssertDefaultSpecId, ignoreDiscriminator);
            case 'assert-last-assigned-field-id':
                return AssertLastAssignedFieldIdToJSONTyped(value as AssertLastAssignedFieldId, ignoreDiscriminator);
            case 'assert-last-assigned-partition-id':
                return AssertLastAssignedPartitionIdToJSONTyped(value as AssertLastAssignedPartitionId, ignoreDiscriminator);
            case 'assert-ref-snapshot-id':
                return AssertRefSnapshotIdToJSONTyped(value as AssertRefSnapshotId, ignoreDiscriminator);
            case 'assert-table-uuid':
                return AssertTableUUIDToJSONTyped(value as AssertTableUUID, ignoreDiscriminator);
            default:
                throw new Error(`No variant of TableRequirement exists with 'type=${value['type']}'`);
        }
    }

    return {
        
        'type': value['type'],
    };
}

