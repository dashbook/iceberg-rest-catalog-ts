/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
    SchemaToJSONTyped,
} from './Schema';
import type { ViewHistoryEntry } from './ViewHistoryEntry';
import {
    ViewHistoryEntryFromJSON,
    ViewHistoryEntryFromJSONTyped,
    ViewHistoryEntryToJSON,
    ViewHistoryEntryToJSONTyped,
} from './ViewHistoryEntry';
import type { ViewVersion } from './ViewVersion';
import {
    ViewVersionFromJSON,
    ViewVersionFromJSONTyped,
    ViewVersionToJSON,
    ViewVersionToJSONTyped,
} from './ViewVersion';

/**
 * 
 * @export
 * @interface ViewMetadata
 */
export interface ViewMetadata {
    /**
     * 
     * @type {string}
     * @memberof ViewMetadata
     */
    viewUuid: string;
    /**
     * 
     * @type {number}
     * @memberof ViewMetadata
     */
    formatVersion: number;
    /**
     * 
     * @type {string}
     * @memberof ViewMetadata
     */
    location: string;
    /**
     * 
     * @type {number}
     * @memberof ViewMetadata
     */
    currentVersionId: number;
    /**
     * 
     * @type {Array<ViewVersion>}
     * @memberof ViewMetadata
     */
    versions: Array<ViewVersion>;
    /**
     * 
     * @type {Array<ViewHistoryEntry>}
     * @memberof ViewMetadata
     */
    versionLog: Array<ViewHistoryEntry>;
    /**
     * 
     * @type {Array<Schema>}
     * @memberof ViewMetadata
     */
    schemas: Array<Schema>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ViewMetadata
     */
    properties?: { [key: string]: string; };
}

/**
 * Check if a given object implements the ViewMetadata interface.
 */
export function instanceOfViewMetadata(value: object): value is ViewMetadata {
    if (!('viewUuid' in value) || value['viewUuid'] === undefined) return false;
    if (!('formatVersion' in value) || value['formatVersion'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('currentVersionId' in value) || value['currentVersionId'] === undefined) return false;
    if (!('versions' in value) || value['versions'] === undefined) return false;
    if (!('versionLog' in value) || value['versionLog'] === undefined) return false;
    if (!('schemas' in value) || value['schemas'] === undefined) return false;
    return true;
}

export function ViewMetadataFromJSON(json: any): ViewMetadata {
    return ViewMetadataFromJSONTyped(json, false);
}

export function ViewMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViewMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'viewUuid': json['view-uuid'],
        'formatVersion': json['format-version'],
        'location': json['location'],
        'currentVersionId': json['current-version-id'],
        'versions': ((json['versions'] as Array<any>).map(ViewVersionFromJSON)),
        'versionLog': ((json['version-log'] as Array<any>).map(ViewHistoryEntryFromJSON)),
        'schemas': ((json['schemas'] as Array<any>).map(SchemaFromJSON)),
        'properties': json['properties'] == null ? undefined : json['properties'],
    };
}

export function ViewMetadataToJSON(json: any): ViewMetadata {
    return ViewMetadataToJSONTyped(json, false);
}

export function ViewMetadataToJSONTyped(value?: ViewMetadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'view-uuid': value['viewUuid'],
        'format-version': value['formatVersion'],
        'location': value['location'],
        'current-version-id': value['currentVersionId'],
        'versions': ((value['versions'] as Array<any>).map(ViewVersionToJSON)),
        'version-log': ((value['versionLog'] as Array<any>).map(ViewHistoryEntryToJSON)),
        'schemas': ((value['schemas'] as Array<any>).map(SchemaToJSON)),
        'properties': value['properties'],
    };
}

