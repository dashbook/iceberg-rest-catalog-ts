/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CompletedPlanningResult } from './CompletedPlanningResult';
import {
    instanceOfCompletedPlanningResult,
    CompletedPlanningResultFromJSON,
    CompletedPlanningResultFromJSONTyped,
    CompletedPlanningResultToJSON,
} from './CompletedPlanningResult';
import type { EmptyPlanningResult } from './EmptyPlanningResult';
import {
    instanceOfEmptyPlanningResult,
    EmptyPlanningResultFromJSON,
    EmptyPlanningResultFromJSONTyped,
    EmptyPlanningResultToJSON,
} from './EmptyPlanningResult';
import type { FailedPlanningResult } from './FailedPlanningResult';
import {
    instanceOfFailedPlanningResult,
    FailedPlanningResultFromJSON,
    FailedPlanningResultFromJSONTyped,
    FailedPlanningResultToJSON,
} from './FailedPlanningResult';

/**
 * @type FetchPlanningResult
 * Result of server-side scan planning for fetchPlanningResult
 * @export
 */
export type FetchPlanningResult = { status: 'cancelled' } & EmptyPlanningResult | { status: 'completed' } & CompletedPlanningResult | { status: 'failed' } & FailedPlanningResult | { status: 'submitted' } & EmptyPlanningResult;

export function FetchPlanningResultFromJSON(json: any): FetchPlanningResult {
    return FetchPlanningResultFromJSONTyped(json, false);
}

export function FetchPlanningResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchPlanningResult {
    if (json == null) {
        return json;
    }
    switch (json['status']) {
        case 'cancelled':
            return Object.assign({}, EmptyPlanningResultFromJSONTyped(json, true), { status: 'cancelled' } as const);
        case 'completed':
            return Object.assign({}, CompletedPlanningResultFromJSONTyped(json, true), { status: 'completed' } as const);
        case 'failed':
            return Object.assign({}, FailedPlanningResultFromJSONTyped(json, true), { status: 'failed' } as const);
        case 'submitted':
            return Object.assign({}, EmptyPlanningResultFromJSONTyped(json, true), { status: 'submitted' } as const);
        default:
            throw new Error(`No variant of FetchPlanningResult exists with 'status=${json['status']}'`);
    }
}

export function FetchPlanningResultToJSON(json: any): any {
    return FetchPlanningResultToJSONTyped(json, false);
}

export function FetchPlanningResultToJSONTyped(value?: FetchPlanningResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['status']) {
        case 'cancelled':
            return Object.assign({}, EmptyPlanningResultToJSON(value), { status: 'cancelled' } as const);
        case 'completed':
            return Object.assign({}, CompletedPlanningResultToJSON(value), { status: 'completed' } as const);
        case 'failed':
            return Object.assign({}, FailedPlanningResultToJSON(value), { status: 'failed' } as const);
        case 'submitted':
            return Object.assign({}, EmptyPlanningResultToJSON(value), { status: 'submitted' } as const);
        default:
            throw new Error(`No variant of FetchPlanningResult exists with 'status=${value['status']}'`);
    }

}

