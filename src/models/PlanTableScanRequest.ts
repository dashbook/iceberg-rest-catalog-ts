/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Expression } from './Expression';
import {
    ExpressionFromJSON,
    ExpressionFromJSONTyped,
    ExpressionToJSON,
    ExpressionToJSONTyped,
} from './Expression';

/**
 * 
 * @export
 * @interface PlanTableScanRequest
 */
export interface PlanTableScanRequest {
    /**
     * Identifier for the snapshot to scan in a point-in-time scan
     * @type {number}
     * @memberof PlanTableScanRequest
     */
    snapshotId?: number;
    /**
     * List of selected schema fields
     * @type {Array<string>}
     * @memberof PlanTableScanRequest
     */
    select?: Array<string>;
    /**
     * Expression used to filter the table data
     * @type {Expression}
     * @memberof PlanTableScanRequest
     */
    filter?: Expression;
    /**
     * Enables case sensitive field matching for filter and select
     * @type {boolean}
     * @memberof PlanTableScanRequest
     */
    caseSensitive?: boolean;
    /**
     * Whether to use the schema at the time the snapshot was written.
     * When time travelling, the snapshot schema should be used (true). When scanning a branch, the table schema should be used (false).
     * @type {boolean}
     * @memberof PlanTableScanRequest
     */
    useSnapshotSchema?: boolean;
    /**
     * Starting snapshot ID for an incremental scan (exclusive)
     * @type {number}
     * @memberof PlanTableScanRequest
     */
    startSnapshotId?: number;
    /**
     * Ending snapshot ID for an incremental scan (inclusive).
     * Required when start-snapshot-id is specified.
     * @type {number}
     * @memberof PlanTableScanRequest
     */
    endSnapshotId?: number;
    /**
     * List of fields for which the service should send column stats.
     * @type {Array<string>}
     * @memberof PlanTableScanRequest
     */
    statsFields?: Array<string>;
}

/**
 * Check if a given object implements the PlanTableScanRequest interface.
 */
export function instanceOfPlanTableScanRequest(value: object): value is PlanTableScanRequest {
    return true;
}

export function PlanTableScanRequestFromJSON(json: any): PlanTableScanRequest {
    return PlanTableScanRequestFromJSONTyped(json, false);
}

export function PlanTableScanRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlanTableScanRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'snapshotId': json['snapshot-id'] == null ? undefined : json['snapshot-id'],
        'select': json['select'] == null ? undefined : json['select'],
        'filter': json['filter'] == null ? undefined : ExpressionFromJSON(json['filter']),
        'caseSensitive': json['case-sensitive'] == null ? undefined : json['case-sensitive'],
        'useSnapshotSchema': json['use-snapshot-schema'] == null ? undefined : json['use-snapshot-schema'],
        'startSnapshotId': json['start-snapshot-id'] == null ? undefined : json['start-snapshot-id'],
        'endSnapshotId': json['end-snapshot-id'] == null ? undefined : json['end-snapshot-id'],
        'statsFields': json['stats-fields'] == null ? undefined : json['stats-fields'],
    };
}

export function PlanTableScanRequestToJSON(json: any): PlanTableScanRequest {
    return PlanTableScanRequestToJSONTyped(json, false);
}

export function PlanTableScanRequestToJSONTyped(value?: PlanTableScanRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'snapshot-id': value['snapshotId'],
        'select': value['select'],
        'filter': ExpressionToJSON(value['filter']),
        'case-sensitive': value['caseSensitive'],
        'use-snapshot-schema': value['useSnapshotSchema'],
        'start-snapshot-id': value['startSnapshotId'],
        'end-snapshot-id': value['endSnapshotId'],
        'stats-fields': value['statsFields'],
    };
}

