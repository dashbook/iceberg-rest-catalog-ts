/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BaseUpdate } from './BaseUpdate';
import {
    BaseUpdateFromJSON,
    BaseUpdateFromJSONTyped,
    BaseUpdateToJSON,
    BaseUpdateToJSONTyped,
} from './BaseUpdate';

/**
 * 
 * @export
 * @interface SetSnapshotRefUpdate
 */
export interface SetSnapshotRefUpdate extends BaseUpdate {
    /**
     * 
     * @type {string}
     * @memberof SetSnapshotRefUpdate
     */
    action: string;
    /**
     * 
     * @type {string}
     * @memberof SetSnapshotRefUpdate
     */
    refName: string;
    /**
     * 
     * @type {string}
     * @memberof SetSnapshotRefUpdate
     */
    type: SetSnapshotRefUpdateTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof SetSnapshotRefUpdate
     */
    snapshotId: number;
    /**
     * 
     * @type {number}
     * @memberof SetSnapshotRefUpdate
     */
    maxRefAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof SetSnapshotRefUpdate
     */
    maxSnapshotAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof SetSnapshotRefUpdate
     */
    minSnapshotsToKeep?: number;
}


/**
 * @export
 */
export const SetSnapshotRefUpdateTypeEnum = {
    Tag: 'tag',
    Branch: 'branch'
} as const;
export type SetSnapshotRefUpdateTypeEnum = typeof SetSnapshotRefUpdateTypeEnum[keyof typeof SetSnapshotRefUpdateTypeEnum];


/**
 * Check if a given object implements the SetSnapshotRefUpdate interface.
 */
export function instanceOfSetSnapshotRefUpdate(value: object): value is SetSnapshotRefUpdate {
    if (!('refName' in value) || value['refName'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('snapshotId' in value) || value['snapshotId'] === undefined) return false;
    return true;
}

export function SetSnapshotRefUpdateFromJSON(json: any): SetSnapshotRefUpdate {
    return SetSnapshotRefUpdateFromJSONTyped(json, false);
}

export function SetSnapshotRefUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetSnapshotRefUpdate {
    if (json == null) {
        return json;
    }
    return {
        ...BaseUpdateFromJSONTyped(json, true),
        'action': json['action'] == null ? undefined : json['action'],
        'refName': json['ref-name'],
        'type': json['type'],
        'snapshotId': json['snapshot-id'],
        'maxRefAgeMs': json['max-ref-age-ms'] == null ? undefined : json['max-ref-age-ms'],
        'maxSnapshotAgeMs': json['max-snapshot-age-ms'] == null ? undefined : json['max-snapshot-age-ms'],
        'minSnapshotsToKeep': json['min-snapshots-to-keep'] == null ? undefined : json['min-snapshots-to-keep'],
    };
}

export function SetSnapshotRefUpdateToJSON(json: any): SetSnapshotRefUpdate {
    return SetSnapshotRefUpdateToJSONTyped(json, false);
}

export function SetSnapshotRefUpdateToJSONTyped(value?: SetSnapshotRefUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...BaseUpdateToJSONTyped(value, true),
        'action': value['action'],
        'ref-name': value['refName'],
        'type': value['type'],
        'snapshot-id': value['snapshotId'],
        'max-ref-age-ms': value['maxRefAgeMs'],
        'max-snapshot-age-ms': value['maxSnapshotAgeMs'],
        'min-snapshots-to-keep': value['minSnapshotsToKeep'],
    };
}

