/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddSchemaUpdate } from './AddSchemaUpdate';
import {
    AddSchemaUpdateFromJSON,
    AddSchemaUpdateFromJSONTyped,
    AddSchemaUpdateToJSON,
    AddSchemaUpdateToJSONTyped,
} from './AddSchemaUpdate';
import type { RemoveSnapshotRefUpdate } from './RemoveSnapshotRefUpdate';
import {
    RemoveSnapshotRefUpdateFromJSON,
    RemoveSnapshotRefUpdateFromJSONTyped,
    RemoveSnapshotRefUpdateToJSON,
    RemoveSnapshotRefUpdateToJSONTyped,
} from './RemoveSnapshotRefUpdate';
import type { SetCurrentSchemaUpdate } from './SetCurrentSchemaUpdate';
import {
    SetCurrentSchemaUpdateFromJSON,
    SetCurrentSchemaUpdateFromJSONTyped,
    SetCurrentSchemaUpdateToJSON,
    SetCurrentSchemaUpdateToJSONTyped,
} from './SetCurrentSchemaUpdate';
import type { SetDefaultSpecUpdate } from './SetDefaultSpecUpdate';
import {
    SetDefaultSpecUpdateFromJSON,
    SetDefaultSpecUpdateFromJSONTyped,
    SetDefaultSpecUpdateToJSON,
    SetDefaultSpecUpdateToJSONTyped,
} from './SetDefaultSpecUpdate';
import type { SetPropertiesUpdate } from './SetPropertiesUpdate';
import {
    SetPropertiesUpdateFromJSON,
    SetPropertiesUpdateFromJSONTyped,
    SetPropertiesUpdateToJSON,
    SetPropertiesUpdateToJSONTyped,
} from './SetPropertiesUpdate';
import type { AddSnapshotUpdate } from './AddSnapshotUpdate';
import {
    AddSnapshotUpdateFromJSON,
    AddSnapshotUpdateFromJSONTyped,
    AddSnapshotUpdateToJSON,
    AddSnapshotUpdateToJSONTyped,
} from './AddSnapshotUpdate';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
    SchemaToJSONTyped,
} from './Schema';
import type { RemovePropertiesUpdate } from './RemovePropertiesUpdate';
import {
    RemovePropertiesUpdateFromJSON,
    RemovePropertiesUpdateFromJSONTyped,
    RemovePropertiesUpdateToJSON,
    RemovePropertiesUpdateToJSONTyped,
} from './RemovePropertiesUpdate';
import type { RemovePartitionSpecsUpdate } from './RemovePartitionSpecsUpdate';
import {
    RemovePartitionSpecsUpdateFromJSON,
    RemovePartitionSpecsUpdateFromJSONTyped,
    RemovePartitionSpecsUpdateToJSON,
    RemovePartitionSpecsUpdateToJSONTyped,
} from './RemovePartitionSpecsUpdate';
import type { SetStatisticsUpdate } from './SetStatisticsUpdate';
import {
    SetStatisticsUpdateFromJSON,
    SetStatisticsUpdateFromJSONTyped,
    SetStatisticsUpdateToJSON,
    SetStatisticsUpdateToJSONTyped,
} from './SetStatisticsUpdate';
import type { AddPartitionSpecUpdate } from './AddPartitionSpecUpdate';
import {
    AddPartitionSpecUpdateFromJSON,
    AddPartitionSpecUpdateFromJSONTyped,
    AddPartitionSpecUpdateToJSON,
    AddPartitionSpecUpdateToJSONTyped,
} from './AddPartitionSpecUpdate';
import type { SetDefaultSortOrderUpdate } from './SetDefaultSortOrderUpdate';
import {
    SetDefaultSortOrderUpdateFromJSON,
    SetDefaultSortOrderUpdateFromJSONTyped,
    SetDefaultSortOrderUpdateToJSON,
    SetDefaultSortOrderUpdateToJSONTyped,
} from './SetDefaultSortOrderUpdate';
import type { UpgradeFormatVersionUpdate } from './UpgradeFormatVersionUpdate';
import {
    UpgradeFormatVersionUpdateFromJSON,
    UpgradeFormatVersionUpdateFromJSONTyped,
    UpgradeFormatVersionUpdateToJSON,
    UpgradeFormatVersionUpdateToJSONTyped,
} from './UpgradeFormatVersionUpdate';
import type { SetLocationUpdate } from './SetLocationUpdate';
import {
    SetLocationUpdateFromJSON,
    SetLocationUpdateFromJSONTyped,
    SetLocationUpdateToJSON,
    SetLocationUpdateToJSONTyped,
} from './SetLocationUpdate';
import type { RemoveStatisticsUpdate } from './RemoveStatisticsUpdate';
import {
    RemoveStatisticsUpdateFromJSON,
    RemoveStatisticsUpdateFromJSONTyped,
    RemoveStatisticsUpdateToJSON,
    RemoveStatisticsUpdateToJSONTyped,
} from './RemoveStatisticsUpdate';
import type { SetSnapshotRefUpdate } from './SetSnapshotRefUpdate';
import {
    SetSnapshotRefUpdateFromJSON,
    SetSnapshotRefUpdateFromJSONTyped,
    SetSnapshotRefUpdateToJSON,
    SetSnapshotRefUpdateToJSONTyped,
} from './SetSnapshotRefUpdate';
import type { EnableRowLineageUpdate } from './EnableRowLineageUpdate';
import {
    EnableRowLineageUpdateFromJSON,
    EnableRowLineageUpdateFromJSONTyped,
    EnableRowLineageUpdateToJSON,
    EnableRowLineageUpdateToJSONTyped,
} from './EnableRowLineageUpdate';
import type { AssignUUIDUpdate } from './AssignUUIDUpdate';
import {
    AssignUUIDUpdateFromJSON,
    AssignUUIDUpdateFromJSONTyped,
    AssignUUIDUpdateToJSON,
    AssignUUIDUpdateToJSONTyped,
} from './AssignUUIDUpdate';
import type { SortOrder } from './SortOrder';
import {
    SortOrderFromJSON,
    SortOrderFromJSONTyped,
    SortOrderToJSON,
    SortOrderToJSONTyped,
} from './SortOrder';
import type { PartitionSpec } from './PartitionSpec';
import {
    PartitionSpecFromJSON,
    PartitionSpecFromJSONTyped,
    PartitionSpecToJSON,
    PartitionSpecToJSONTyped,
} from './PartitionSpec';
import type { StatisticsFile } from './StatisticsFile';
import {
    StatisticsFileFromJSON,
    StatisticsFileFromJSONTyped,
    StatisticsFileToJSON,
    StatisticsFileToJSONTyped,
} from './StatisticsFile';
import type { RemoveSnapshotsUpdate } from './RemoveSnapshotsUpdate';
import {
    RemoveSnapshotsUpdateFromJSON,
    RemoveSnapshotsUpdateFromJSONTyped,
    RemoveSnapshotsUpdateToJSON,
    RemoveSnapshotsUpdateToJSONTyped,
} from './RemoveSnapshotsUpdate';
import type { Snapshot } from './Snapshot';
import {
    SnapshotFromJSON,
    SnapshotFromJSONTyped,
    SnapshotToJSON,
    SnapshotToJSONTyped,
} from './Snapshot';
import type { AddSortOrderUpdate } from './AddSortOrderUpdate';
import {
    AddSortOrderUpdateFromJSON,
    AddSortOrderUpdateFromJSONTyped,
    AddSortOrderUpdateToJSON,
    AddSortOrderUpdateToJSONTyped,
} from './AddSortOrderUpdate';
import type { RemoveSchemasUpdate } from './RemoveSchemasUpdate';
import {
    RemoveSchemasUpdateFromJSON,
    RemoveSchemasUpdateFromJSONTyped,
    RemoveSchemasUpdateToJSON,
    RemoveSchemasUpdateToJSONTyped,
} from './RemoveSchemasUpdate';

/**
 * 
 * @export
 * @interface TableUpdate
 */
export interface TableUpdate {
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    action: string;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    formatVersion: number;
    /**
     * 
     * @type {Schema}
     * @memberof TableUpdate
     */
    schema: Schema;
    /**
     * This optional field is **DEPRECATED for REMOVAL** since it more safe to handle this internally, and shouldn't be exposed to the clients.
     * The highest assigned column ID for the table. This is used to ensure columns are always assigned an unused ID when evolving schemas. When omitted, it will be computed on the server side.
     * @type {number}
     * @memberof TableUpdate
     * @deprecated
     */
    lastColumnId?: number;
    /**
     * Schema ID to set as current, or -1 to set last added schema
     * @type {number}
     * @memberof TableUpdate
     */
    schemaId: number;
    /**
     * 
     * @type {PartitionSpec}
     * @memberof TableUpdate
     */
    spec: PartitionSpec;
    /**
     * Partition spec ID to set as the default, or -1 to set last added spec
     * @type {number}
     * @memberof TableUpdate
     */
    specId: number;
    /**
     * 
     * @type {SortOrder}
     * @memberof TableUpdate
     */
    sortOrder: SortOrder;
    /**
     * Sort order ID to set as the default, or -1 to set last added sort order
     * @type {number}
     * @memberof TableUpdate
     */
    sortOrderId: number;
    /**
     * 
     * @type {Snapshot}
     * @memberof TableUpdate
     */
    snapshot: Snapshot;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    refName: string;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    type: TableUpdateTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    snapshotId: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    maxRefAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    maxSnapshotAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    minSnapshotsToKeep?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof TableUpdate
     */
    snapshotIds: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    location: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TableUpdate
     */
    updates: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof TableUpdate
     */
    removals: Array<string>;
    /**
     * 
     * @type {StatisticsFile}
     * @memberof TableUpdate
     */
    statistics: StatisticsFile;
    /**
     * 
     * @type {Array<number>}
     * @memberof TableUpdate
     */
    specIds: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof TableUpdate
     */
    schemaIds: Array<number>;
}


/**
 * @export
 */
export const TableUpdateTypeEnum = {
    Tag: 'tag',
    Branch: 'branch'
} as const;
export type TableUpdateTypeEnum = typeof TableUpdateTypeEnum[keyof typeof TableUpdateTypeEnum];


/**
 * Check if a given object implements the TableUpdate interface.
 */
export function instanceOfTableUpdate(value: object): value is TableUpdate {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('formatVersion' in value) || value['formatVersion'] === undefined) return false;
    if (!('schema' in value) || value['schema'] === undefined) return false;
    if (!('schemaId' in value) || value['schemaId'] === undefined) return false;
    if (!('spec' in value) || value['spec'] === undefined) return false;
    if (!('specId' in value) || value['specId'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('sortOrderId' in value) || value['sortOrderId'] === undefined) return false;
    if (!('snapshot' in value) || value['snapshot'] === undefined) return false;
    if (!('refName' in value) || value['refName'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('snapshotId' in value) || value['snapshotId'] === undefined) return false;
    if (!('snapshotIds' in value) || value['snapshotIds'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('updates' in value) || value['updates'] === undefined) return false;
    if (!('removals' in value) || value['removals'] === undefined) return false;
    if (!('statistics' in value) || value['statistics'] === undefined) return false;
    if (!('specIds' in value) || value['specIds'] === undefined) return false;
    if (!('schemaIds' in value) || value['schemaIds'] === undefined) return false;
    return true;
}

export function TableUpdateFromJSON(json: any): TableUpdate {
    return TableUpdateFromJSONTyped(json, false);
}

export function TableUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'action': json['action'],
        'formatVersion': json['format-version'],
        'schema': SchemaFromJSON(json['schema']),
        'lastColumnId': json['last-column-id'] == null ? undefined : json['last-column-id'],
        'schemaId': json['schema-id'],
        'spec': PartitionSpecFromJSON(json['spec']),
        'specId': json['spec-id'],
        'sortOrder': SortOrderFromJSON(json['sort-order']),
        'sortOrderId': json['sort-order-id'],
        'snapshot': SnapshotFromJSON(json['snapshot']),
        'refName': json['ref-name'],
        'type': json['type'],
        'snapshotId': json['snapshot-id'],
        'maxRefAgeMs': json['max-ref-age-ms'] == null ? undefined : json['max-ref-age-ms'],
        'maxSnapshotAgeMs': json['max-snapshot-age-ms'] == null ? undefined : json['max-snapshot-age-ms'],
        'minSnapshotsToKeep': json['min-snapshots-to-keep'] == null ? undefined : json['min-snapshots-to-keep'],
        'snapshotIds': json['snapshot-ids'],
        'location': json['location'],
        'updates': json['updates'],
        'removals': json['removals'],
        'statistics': StatisticsFileFromJSON(json['statistics']),
        'specIds': json['spec-ids'],
        'schemaIds': json['schema-ids'],
    };
}

export function TableUpdateToJSON(json: any): TableUpdate {
    return TableUpdateToJSONTyped(json, false);
}

export function TableUpdateToJSONTyped(value?: TableUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'action': value['action'],
        'format-version': value['formatVersion'],
        'schema': SchemaToJSON(value['schema']),
        'last-column-id': value['lastColumnId'],
        'schema-id': value['schemaId'],
        'spec': PartitionSpecToJSON(value['spec']),
        'spec-id': value['specId'],
        'sort-order': SortOrderToJSON(value['sortOrder']),
        'sort-order-id': value['sortOrderId'],
        'snapshot': SnapshotToJSON(value['snapshot']),
        'ref-name': value['refName'],
        'type': value['type'],
        'snapshot-id': value['snapshotId'],
        'max-ref-age-ms': value['maxRefAgeMs'],
        'max-snapshot-age-ms': value['maxSnapshotAgeMs'],
        'min-snapshots-to-keep': value['minSnapshotsToKeep'],
        'snapshot-ids': value['snapshotIds'],
        'location': value['location'],
        'updates': value['updates'],
        'removals': value['removals'],
        'statistics': StatisticsFileToJSON(value['statistics']),
        'spec-ids': value['specIds'],
        'schema-ids': value['schemaIds'],
    };
}

