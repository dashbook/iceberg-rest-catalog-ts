/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type } from './Type';
import {
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
    TypeToJSONTyped,
} from './Type';

/**
 * 
 * @export
 * @interface MapType
 */
export interface MapType {
    /**
     * 
     * @type {string}
     * @memberof MapType
     */
    type: MapTypeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof MapType
     */
    keyId: number;
    /**
     * 
     * @type {Type}
     * @memberof MapType
     */
    key: Type;
    /**
     * 
     * @type {number}
     * @memberof MapType
     */
    valueId: number;
    /**
     * 
     * @type {Type}
     * @memberof MapType
     */
    value: Type;
    /**
     * 
     * @type {boolean}
     * @memberof MapType
     */
    valueRequired: boolean;
}


/**
 * @export
 */
export const MapTypeTypeEnum = {
    Map: 'map'
} as const;
export type MapTypeTypeEnum = typeof MapTypeTypeEnum[keyof typeof MapTypeTypeEnum];


/**
 * Check if a given object implements the MapType interface.
 */
export function instanceOfMapType(value: object): value is MapType {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('keyId' in value) || value['keyId'] === undefined) return false;
    if (!('key' in value) || value['key'] === undefined) return false;
    if (!('valueId' in value) || value['valueId'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('valueRequired' in value) || value['valueRequired'] === undefined) return false;
    return true;
}

export function MapTypeFromJSON(json: any): MapType {
    return MapTypeFromJSONTyped(json, false);
}

export function MapTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapType {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'keyId': json['key-id'],
        'key': TypeFromJSON(json['key']),
        'valueId': json['value-id'],
        'value': TypeFromJSON(json['value']),
        'valueRequired': json['value-required'],
    };
}

export function MapTypeToJSON(json: any): MapType {
    return MapTypeToJSONTyped(json, false);
}

export function MapTypeToJSONTyped(value?: MapType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'key-id': value['keyId'],
        'key': TypeToJSON(value['key']),
        'value-id': value['valueId'],
        'value': TypeToJSON(value['value']),
        'value-required': value['valueRequired'],
    };
}

