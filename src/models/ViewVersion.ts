/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ViewRepresentation } from './ViewRepresentation';
import {
    ViewRepresentationFromJSON,
    ViewRepresentationFromJSONTyped,
    ViewRepresentationToJSON,
    ViewRepresentationToJSONTyped,
} from './ViewRepresentation';

/**
 * 
 * @export
 * @interface ViewVersion
 */
export interface ViewVersion {
    /**
     * 
     * @type {number}
     * @memberof ViewVersion
     */
    versionId: number;
    /**
     * 
     * @type {number}
     * @memberof ViewVersion
     */
    timestampMs: number;
    /**
     * Schema ID to set as current, or -1 to set last added schema
     * @type {number}
     * @memberof ViewVersion
     */
    schemaId: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ViewVersion
     */
    summary: { [key: string]: string; };
    /**
     * 
     * @type {Array<ViewRepresentation>}
     * @memberof ViewVersion
     */
    representations: Array<ViewRepresentation>;
    /**
     * 
     * @type {string}
     * @memberof ViewVersion
     */
    defaultCatalog?: string;
    /**
     * Reference to one or more levels of a namespace
     * @type {Array<string>}
     * @memberof ViewVersion
     */
    defaultNamespace: Array<string>;
}

/**
 * Check if a given object implements the ViewVersion interface.
 */
export function instanceOfViewVersion(value: object): value is ViewVersion {
    if (!('versionId' in value) || value['versionId'] === undefined) return false;
    if (!('timestampMs' in value) || value['timestampMs'] === undefined) return false;
    if (!('schemaId' in value) || value['schemaId'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('representations' in value) || value['representations'] === undefined) return false;
    if (!('defaultNamespace' in value) || value['defaultNamespace'] === undefined) return false;
    return true;
}

export function ViewVersionFromJSON(json: any): ViewVersion {
    return ViewVersionFromJSONTyped(json, false);
}

export function ViewVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViewVersion {
    if (json == null) {
        return json;
    }
    return {
        
        'versionId': json['version-id'],
        'timestampMs': json['timestamp-ms'],
        'schemaId': json['schema-id'],
        'summary': json['summary'],
        'representations': ((json['representations'] as Array<any>).map(ViewRepresentationFromJSON)),
        'defaultCatalog': json['default-catalog'] == null ? undefined : json['default-catalog'],
        'defaultNamespace': json['default-namespace'],
    };
}

export function ViewVersionToJSON(json: any): ViewVersion {
    return ViewVersionToJSONTyped(json, false);
}

export function ViewVersionToJSONTyped(value?: ViewVersion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version-id': value['versionId'],
        'timestamp-ms': value['timestampMs'],
        'schema-id': value['schemaId'],
        'summary': value['summary'],
        'representations': ((value['representations'] as Array<any>).map(ViewRepresentationToJSON)),
        'default-catalog': value['defaultCatalog'],
        'default-namespace': value['defaultNamespace'],
    };
}

