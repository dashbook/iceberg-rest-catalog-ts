/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BaseUpdate } from './BaseUpdate';
import {
    BaseUpdateFromJSON,
    BaseUpdateFromJSONTyped,
    BaseUpdateToJSON,
    BaseUpdateToJSONTyped,
} from './BaseUpdate';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
    SchemaToJSONTyped,
} from './Schema';

/**
 * 
 * @export
 * @interface AddSchemaUpdate
 */
export interface AddSchemaUpdate extends BaseUpdate {
    /**
     * 
     * @type {string}
     * @memberof AddSchemaUpdate
     */
    action: string;
    /**
     * 
     * @type {Schema}
     * @memberof AddSchemaUpdate
     */
    schema: Schema;
    /**
     * This optional field is **DEPRECATED for REMOVAL** since it more safe to handle this internally, and shouldn't be exposed to the clients.
     * The highest assigned column ID for the table. This is used to ensure columns are always assigned an unused ID when evolving schemas. When omitted, it will be computed on the server side.
     * @type {number}
     * @memberof AddSchemaUpdate
     * @deprecated
     */
    lastColumnId?: number;
}

/**
 * Check if a given object implements the AddSchemaUpdate interface.
 */
export function instanceOfAddSchemaUpdate(value: object): value is AddSchemaUpdate {
    if (!('schema' in value) || value['schema'] === undefined) return false;
    return true;
}

export function AddSchemaUpdateFromJSON(json: any): AddSchemaUpdate {
    return AddSchemaUpdateFromJSONTyped(json, false);
}

export function AddSchemaUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddSchemaUpdate {
    if (json == null) {
        return json;
    }
    return {
        ...BaseUpdateFromJSONTyped(json, true),
        'action': json['action'] == null ? undefined : json['action'],
        'schema': SchemaFromJSON(json['schema']),
        'lastColumnId': json['last-column-id'] == null ? undefined : json['last-column-id'],
    };
}

export function AddSchemaUpdateToJSON(json: any): AddSchemaUpdate {
    return AddSchemaUpdateToJSONTyped(json, false);
}

export function AddSchemaUpdateToJSONTyped(value?: AddSchemaUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...BaseUpdateToJSONTyped(value, true),
        'action': value['action'],
        'schema': SchemaToJSON(value['schema']),
        'last-column-id': value['lastColumnId'],
    };
}

