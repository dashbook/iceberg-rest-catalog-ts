/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TableIdentifier } from './TableIdentifier';
import {
    TableIdentifierFromJSON,
    TableIdentifierFromJSONTyped,
    TableIdentifierToJSON,
    TableIdentifierToJSONTyped,
} from './TableIdentifier';
import type { TableRequirement } from './TableRequirement';
import {
    TableRequirementFromJSON,
    TableRequirementFromJSONTyped,
    TableRequirementToJSON,
    TableRequirementToJSONTyped,
} from './TableRequirement';
import type { TableUpdate } from './TableUpdate';
import {
    TableUpdateFromJSON,
    TableUpdateFromJSONTyped,
    TableUpdateToJSON,
    TableUpdateToJSONTyped,
} from './TableUpdate';

/**
 * 
 * @export
 * @interface CommitTableRequest
 */
export interface CommitTableRequest {
    /**
     * Table identifier to update; must be present for CommitTransactionRequest
     * @type {TableIdentifier}
     * @memberof CommitTableRequest
     */
    identifier?: TableIdentifier;
    /**
     * 
     * @type {Array<TableRequirement>}
     * @memberof CommitTableRequest
     */
    requirements: Array<TableRequirement>;
    /**
     * 
     * @type {Array<TableUpdate>}
     * @memberof CommitTableRequest
     */
    updates: Array<TableUpdate>;
}

/**
 * Check if a given object implements the CommitTableRequest interface.
 */
export function instanceOfCommitTableRequest(value: object): value is CommitTableRequest {
    if (!('requirements' in value) || value['requirements'] === undefined) return false;
    if (!('updates' in value) || value['updates'] === undefined) return false;
    return true;
}

export function CommitTableRequestFromJSON(json: any): CommitTableRequest {
    return CommitTableRequestFromJSONTyped(json, false);
}

export function CommitTableRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitTableRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'identifier': json['identifier'] == null ? undefined : TableIdentifierFromJSON(json['identifier']),
        'requirements': ((json['requirements'] as Array<any>).map(TableRequirementFromJSON)),
        'updates': ((json['updates'] as Array<any>).map(TableUpdateFromJSON)),
    };
}

export function CommitTableRequestToJSON(json: any): CommitTableRequest {
    return CommitTableRequestToJSONTyped(json, false);
}

export function CommitTableRequestToJSONTyped(value?: CommitTableRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'identifier': TableIdentifierToJSON(value['identifier']),
        'requirements': ((value['requirements'] as Array<any>).map(TableRequirementToJSON)),
        'updates': ((value['updates'] as Array<any>).map(TableUpdateToJSON)),
    };
}

