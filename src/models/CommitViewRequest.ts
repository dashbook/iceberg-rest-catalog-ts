/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TableIdentifier } from './TableIdentifier';
import {
    TableIdentifierFromJSON,
    TableIdentifierFromJSONTyped,
    TableIdentifierToJSON,
    TableIdentifierToJSONTyped,
} from './TableIdentifier';
import type { ViewUpdate } from './ViewUpdate';
import {
    ViewUpdateFromJSON,
    ViewUpdateFromJSONTyped,
    ViewUpdateToJSON,
    ViewUpdateToJSONTyped,
} from './ViewUpdate';
import type { ViewRequirement } from './ViewRequirement';
import {
    ViewRequirementFromJSON,
    ViewRequirementFromJSONTyped,
    ViewRequirementToJSON,
    ViewRequirementToJSONTyped,
} from './ViewRequirement';

/**
 * 
 * @export
 * @interface CommitViewRequest
 */
export interface CommitViewRequest {
    /**
     * View identifier to update
     * @type {TableIdentifier}
     * @memberof CommitViewRequest
     */
    identifier?: TableIdentifier;
    /**
     * 
     * @type {Array<ViewRequirement>}
     * @memberof CommitViewRequest
     */
    requirements?: Array<ViewRequirement>;
    /**
     * 
     * @type {Array<ViewUpdate>}
     * @memberof CommitViewRequest
     */
    updates: Array<ViewUpdate>;
}

/**
 * Check if a given object implements the CommitViewRequest interface.
 */
export function instanceOfCommitViewRequest(value: object): value is CommitViewRequest {
    if (!('updates' in value) || value['updates'] === undefined) return false;
    return true;
}

export function CommitViewRequestFromJSON(json: any): CommitViewRequest {
    return CommitViewRequestFromJSONTyped(json, false);
}

export function CommitViewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitViewRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'identifier': json['identifier'] == null ? undefined : TableIdentifierFromJSON(json['identifier']),
        'requirements': json['requirements'] == null ? undefined : ((json['requirements'] as Array<any>).map(ViewRequirementFromJSON)),
        'updates': ((json['updates'] as Array<any>).map(ViewUpdateFromJSON)),
    };
}

export function CommitViewRequestToJSON(json: any): CommitViewRequest {
    return CommitViewRequestToJSONTyped(json, false);
}

export function CommitViewRequestToJSONTyped(value?: CommitViewRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'identifier': TableIdentifierToJSON(value['identifier']),
        'requirements': value['requirements'] == null ? undefined : ((value['requirements'] as Array<any>).map(ViewRequirementToJSON)),
        'updates': ((value['updates'] as Array<any>).map(ViewUpdateToJSON)),
    };
}

