/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TableMetadata } from './TableMetadata';
import {
    TableMetadataFromJSON,
    TableMetadataFromJSONTyped,
    TableMetadataToJSON,
    TableMetadataToJSONTyped,
} from './TableMetadata';
import type { StorageCredential } from './StorageCredential';
import {
    StorageCredentialFromJSON,
    StorageCredentialFromJSONTyped,
    StorageCredentialToJSON,
    StorageCredentialToJSONTyped,
} from './StorageCredential';

/**
 * Result used when a table is successfully loaded.
 * 
 * 
 * The table metadata JSON is returned in the `metadata` field. The corresponding file location of table metadata should be returned in the `metadata-location` field, unless the metadata is not yet committed. For example, a create transaction may return metadata that is staged but not committed.
 * Clients can check whether metadata has changed by comparing metadata locations after the table has been created.
 * 
 * 
 * The `config` map returns table-specific configuration for the table's resources, including its HTTP client and FileIO. For example, config may contain a specific FileIO implementation class for the table depending on its underlying storage.
 * 
 * 
 * The following configurations should be respected by clients:
 * 
 * ## General Configurations
 * 
 * - `token`: Authorization bearer token to use for table requests if OAuth2 security is enabled 
 * 
 * ## AWS Configurations
 * 
 * The following configurations should be respected when working with tables stored in AWS S3
 *  - `client.region`: region to configure client for making requests to AWS
 *  - `s3.access-key-id`: id for credentials that provide access to the data in S3
 *  - `s3.secret-access-key`: secret for credentials that provide access to data in S3 
 *  - `s3.session-token`: if present, this value should be used for as the session token 
 *  - `s3.remote-signing-enabled`: if `true` remote signing should be performed as described in the `s3-signer-open-api.yaml` specification
 *  - `s3.cross-region-access-enabled`: if `true`, S3 Cross-Region bucket access is enabled
 * 
 * ## Storage Credentials
 * 
 * Credentials for ADLS / GCS / S3 / ... are provided through the `storage-credentials` field.
 * Clients must first check whether the respective credentials exist in the `storage-credentials` field before checking the `config` for credentials.
 * 
 * @export
 * @interface LoadTableResult
 */
export interface LoadTableResult {
    /**
     * May be null if the table is staged as part of a transaction
     * @type {string}
     * @memberof LoadTableResult
     */
    metadataLocation?: string;
    /**
     * 
     * @type {TableMetadata}
     * @memberof LoadTableResult
     */
    metadata: TableMetadata;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof LoadTableResult
     */
    config?: { [key: string]: string; };
    /**
     * 
     * @type {Array<StorageCredential>}
     * @memberof LoadTableResult
     */
    storageCredentials?: Array<StorageCredential>;
}

/**
 * Check if a given object implements the LoadTableResult interface.
 */
export function instanceOfLoadTableResult(value: object): value is LoadTableResult {
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function LoadTableResultFromJSON(json: any): LoadTableResult {
    return LoadTableResultFromJSONTyped(json, false);
}

export function LoadTableResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoadTableResult {
    if (json == null) {
        return json;
    }
    return {
        
        'metadataLocation': json['metadata-location'] == null ? undefined : json['metadata-location'],
        'metadata': TableMetadataFromJSON(json['metadata']),
        'config': json['config'] == null ? undefined : json['config'],
        'storageCredentials': json['storage-credentials'] == null ? undefined : ((json['storage-credentials'] as Array<any>).map(StorageCredentialFromJSON)),
    };
}

export function LoadTableResultToJSON(json: any): LoadTableResult {
    return LoadTableResultToJSONTyped(json, false);
}

export function LoadTableResultToJSONTyped(value?: LoadTableResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metadata-location': value['metadataLocation'],
        'metadata': TableMetadataToJSON(value['metadata']),
        'config': value['config'],
        'storage-credentials': value['storageCredentials'] == null ? undefined : ((value['storageCredentials'] as Array<any>).map(StorageCredentialToJSON)),
    };
}

