/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * JSON error payload returned in a response with further details on the error
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * Human-readable error message
     * @type {string}
     * @memberof ErrorModel
     */
    message: string;
    /**
     * Internal type definition of the error
     * @type {string}
     * @memberof ErrorModel
     */
    type: string;
    /**
     * HTTP response code
     * @type {number}
     * @memberof ErrorModel
     */
    code: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ErrorModel
     */
    stack?: Array<string>;
}

/**
 * Check if a given object implements the ErrorModel interface.
 */
export function instanceOfErrorModel(value: object): value is ErrorModel {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    return true;
}

export function ErrorModelFromJSON(json: any): ErrorModel {
    return ErrorModelFromJSONTyped(json, false);
}

export function ErrorModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorModel {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'type': json['type'],
        'code': json['code'],
        'stack': json['stack'] == null ? undefined : json['stack'],
    };
}

export function ErrorModelToJSON(json: any): ErrorModel {
    return ErrorModelToJSONTyped(json, false);
}

export function ErrorModelToJSONTyped(value?: ErrorModel | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'type': value['type'],
        'code': value['code'],
        'stack': value['stack'],
    };
}

