/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformTerm
 */
export interface TransformTerm {
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    type: TransformTermTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    transform: string;
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    term: string;
}


/**
 * @export
 */
export const TransformTermTypeEnum = {
    Transform: 'transform'
} as const;
export type TransformTermTypeEnum = typeof TransformTermTypeEnum[keyof typeof TransformTermTypeEnum];


/**
 * Check if a given object implements the TransformTerm interface.
 */
export function instanceOfTransformTerm(value: object): value is TransformTerm {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('transform' in value) || value['transform'] === undefined) return false;
    if (!('term' in value) || value['term'] === undefined) return false;
    return true;
}

export function TransformTermFromJSON(json: any): TransformTerm {
    return TransformTermFromJSONTyped(json, false);
}

export function TransformTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'transform': json['transform'],
        'term': json['term'],
    };
}

export function TransformTermToJSON(json: any): TransformTerm {
    return TransformTermToJSONTyped(json, false);
}

export function TransformTermToJSONTyped(value?: TransformTerm | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'transform': value['transform'],
        'term': value['term'],
    };
}

