/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TokenType } from './TokenType';
import {
    TokenTypeFromJSON,
    TokenTypeFromJSONTyped,
    TokenTypeToJSON,
    TokenTypeToJSONTyped,
} from './TokenType';

/**
 * The `oauth/tokens` endpoint and related schemas are **DEPRECATED for REMOVAL** from this spec, see description of the endpoint.
 * @export
 * @interface OAuthTokenResponse
 */
export interface OAuthTokenResponse {
    /**
     * The access token, for client credentials or token exchange
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    accessToken: string;
    /**
     * Access token type for client credentials or token exchange
     * 
     * See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    tokenType: OAuthTokenResponseTokenTypeEnum;
    /**
     * Lifetime of the access token in seconds for client credentials or token exchange
     * @type {number}
     * @memberof OAuthTokenResponse
     */
    expiresIn?: number;
    /**
     * 
     * @type {TokenType}
     * @memberof OAuthTokenResponse
     */
    issuedTokenType?: TokenType;
    /**
     * Refresh token for client credentials or token exchange
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    refreshToken?: string;
    /**
     * Authorization scope for client credentials or token exchange
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    scope?: string;
}


/**
 * @export
 */
export const OAuthTokenResponseTokenTypeEnum = {
    Bearer: 'bearer',
    Mac: 'mac',
    NA: 'N_A'
} as const;
export type OAuthTokenResponseTokenTypeEnum = typeof OAuthTokenResponseTokenTypeEnum[keyof typeof OAuthTokenResponseTokenTypeEnum];


/**
 * Check if a given object implements the OAuthTokenResponse interface.
 */
export function instanceOfOAuthTokenResponse(value: object): value is OAuthTokenResponse {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    return true;
}

export function OAuthTokenResponseFromJSON(json: any): OAuthTokenResponse {
    return OAuthTokenResponseFromJSONTyped(json, false);
}

export function OAuthTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthTokenResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'tokenType': json['token_type'],
        'expiresIn': json['expires_in'] == null ? undefined : json['expires_in'],
        'issuedTokenType': json['issued_token_type'] == null ? undefined : TokenTypeFromJSON(json['issued_token_type']),
        'refreshToken': json['refresh_token'] == null ? undefined : json['refresh_token'],
        'scope': json['scope'] == null ? undefined : json['scope'],
    };
}

export function OAuthTokenResponseToJSON(json: any): OAuthTokenResponse {
    return OAuthTokenResponseToJSONTyped(json, false);
}

export function OAuthTokenResponseToJSONTyped(value?: OAuthTokenResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'token_type': value['tokenType'],
        'expires_in': value['expiresIn'],
        'issued_token_type': TokenTypeToJSON(value['issuedTokenType']),
        'refresh_token': value['refreshToken'],
        'scope': value['scope'],
    };
}

