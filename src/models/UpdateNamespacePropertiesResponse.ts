/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateNamespacePropertiesResponse
 */
export interface UpdateNamespacePropertiesResponse {
    /**
     * List of property keys that were added or updated
     * @type {Set<string>}
     * @memberof UpdateNamespacePropertiesResponse
     */
    updated: Set<string>;
    /**
     * List of properties that were removed
     * @type {Array<string>}
     * @memberof UpdateNamespacePropertiesResponse
     */
    removed: Array<string>;
    /**
     * List of properties requested for removal that were not found in the namespace's properties. Represents a partial success response. Server's do not need to implement this.
     * @type {Array<string>}
     * @memberof UpdateNamespacePropertiesResponse
     */
    missing?: Array<string>;
}

/**
 * Check if a given object implements the UpdateNamespacePropertiesResponse interface.
 */
export function instanceOfUpdateNamespacePropertiesResponse(value: object): value is UpdateNamespacePropertiesResponse {
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('removed' in value) || value['removed'] === undefined) return false;
    return true;
}

export function UpdateNamespacePropertiesResponseFromJSON(json: any): UpdateNamespacePropertiesResponse {
    return UpdateNamespacePropertiesResponseFromJSONTyped(json, false);
}

export function UpdateNamespacePropertiesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateNamespacePropertiesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'updated': new Set(json['updated']),
        'removed': json['removed'],
        'missing': json['missing'] == null ? undefined : json['missing'],
    };
}

export function UpdateNamespacePropertiesResponseToJSON(json: any): UpdateNamespacePropertiesResponse {
    return UpdateNamespacePropertiesResponseToJSONTyped(json, false);
}

export function UpdateNamespacePropertiesResponseToJSONTyped(value?: UpdateNamespacePropertiesResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'updated': Array.from(value['updated'] as Set<any>),
        'removed': value['removed'],
        'missing': value['missing'],
    };
}

