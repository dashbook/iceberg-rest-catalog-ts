/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateNamespacePropertiesRequest
 */
export interface UpdateNamespacePropertiesRequest {
    /**
     * 
     * @type {Set<string>}
     * @memberof UpdateNamespacePropertiesRequest
     */
    removals?: Set<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UpdateNamespacePropertiesRequest
     */
    updates?: { [key: string]: string; };
}

/**
 * Check if a given object implements the UpdateNamespacePropertiesRequest interface.
 */
export function instanceOfUpdateNamespacePropertiesRequest(value: object): value is UpdateNamespacePropertiesRequest {
    return true;
}

export function UpdateNamespacePropertiesRequestFromJSON(json: any): UpdateNamespacePropertiesRequest {
    return UpdateNamespacePropertiesRequestFromJSONTyped(json, false);
}

export function UpdateNamespacePropertiesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateNamespacePropertiesRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'removals': json['removals'] == null ? undefined : new Set(json['removals']),
        'updates': json['updates'] == null ? undefined : json['updates'],
    };
}

export function UpdateNamespacePropertiesRequestToJSON(json: any): UpdateNamespacePropertiesRequest {
    return UpdateNamespacePropertiesRequestToJSONTyped(json, false);
}

export function UpdateNamespacePropertiesRequestToJSONTyped(value?: UpdateNamespacePropertiesRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'removals': value['removals'] == null ? undefined : Array.from(value['removals'] as Set<any>),
        'updates': value['updates'],
    };
}

