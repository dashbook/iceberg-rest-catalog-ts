/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SortDirection } from './SortDirection';
import {
    SortDirectionFromJSON,
    SortDirectionFromJSONTyped,
    SortDirectionToJSON,
    SortDirectionToJSONTyped,
} from './SortDirection';
import type { NullOrder } from './NullOrder';
import {
    NullOrderFromJSON,
    NullOrderFromJSONTyped,
    NullOrderToJSON,
    NullOrderToJSONTyped,
} from './NullOrder';

/**
 * 
 * @export
 * @interface SortField
 */
export interface SortField {
    /**
     * 
     * @type {number}
     * @memberof SortField
     */
    sourceId: number;
    /**
     * 
     * @type {string}
     * @memberof SortField
     */
    transform: string;
    /**
     * 
     * @type {SortDirection}
     * @memberof SortField
     */
    direction: SortDirection;
    /**
     * 
     * @type {NullOrder}
     * @memberof SortField
     */
    nullOrder: NullOrder;
}



/**
 * Check if a given object implements the SortField interface.
 */
export function instanceOfSortField(value: object): value is SortField {
    if (!('sourceId' in value) || value['sourceId'] === undefined) return false;
    if (!('transform' in value) || value['transform'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('nullOrder' in value) || value['nullOrder'] === undefined) return false;
    return true;
}

export function SortFieldFromJSON(json: any): SortField {
    return SortFieldFromJSONTyped(json, false);
}

export function SortFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): SortField {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceId': json['source-id'],
        'transform': json['transform'],
        'direction': SortDirectionFromJSON(json['direction']),
        'nullOrder': NullOrderFromJSON(json['null-order']),
    };
}

export function SortFieldToJSON(json: any): SortField {
    return SortFieldToJSONTyped(json, false);
}

export function SortFieldToJSONTyped(value?: SortField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source-id': value['sourceId'],
        'transform': value['transform'],
        'direction': SortDirectionToJSON(value['direction']),
        'null-order': NullOrderToJSON(value['nullOrder']),
    };
}

