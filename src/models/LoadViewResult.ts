/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ViewMetadata } from './ViewMetadata';
import {
    ViewMetadataFromJSON,
    ViewMetadataFromJSONTyped,
    ViewMetadataToJSON,
    ViewMetadataToJSONTyped,
} from './ViewMetadata';

/**
 * Result used when a view is successfully loaded.
 * 
 * 
 * The view metadata JSON is returned in the `metadata` field. The corresponding file location of view metadata is returned in the `metadata-location` field.
 * Clients can check whether metadata has changed by comparing metadata locations after the view has been created.
 * 
 * The `config` map returns view-specific configuration for the view's resources.
 * 
 * The following configurations should be respected by clients:
 * 
 * ## General Configurations
 * 
 * - `token`: Authorization bearer token to use for view requests if OAuth2 security is enabled
 * 
 * @export
 * @interface LoadViewResult
 */
export interface LoadViewResult {
    /**
     * 
     * @type {string}
     * @memberof LoadViewResult
     */
    metadataLocation: string;
    /**
     * 
     * @type {ViewMetadata}
     * @memberof LoadViewResult
     */
    metadata: ViewMetadata;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof LoadViewResult
     */
    config?: { [key: string]: string; };
}

/**
 * Check if a given object implements the LoadViewResult interface.
 */
export function instanceOfLoadViewResult(value: object): value is LoadViewResult {
    if (!('metadataLocation' in value) || value['metadataLocation'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function LoadViewResultFromJSON(json: any): LoadViewResult {
    return LoadViewResultFromJSONTyped(json, false);
}

export function LoadViewResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoadViewResult {
    if (json == null) {
        return json;
    }
    return {
        
        'metadataLocation': json['metadata-location'],
        'metadata': ViewMetadataFromJSON(json['metadata']),
        'config': json['config'] == null ? undefined : json['config'],
    };
}

export function LoadViewResultToJSON(json: any): LoadViewResult {
    return LoadViewResultToJSONTyped(json, false);
}

export function LoadViewResultToJSONTyped(value?: LoadViewResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metadata-location': value['metadataLocation'],
        'metadata': ViewMetadataToJSON(value['metadata']),
        'config': value['config'],
    };
}

